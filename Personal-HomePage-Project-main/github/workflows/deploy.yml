name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # main 브랜치에 push 시 배포 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build with Gradle
        run: ./gradlew build -x test # 테스트 제외, 클린 빌드 추가 고려

      - name: Rename and move jar
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/myapp.jar

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp deploy/myapp.jar s3://healing-space-codedeploy-bucket/myapp.jar
          aws s3 cp appspec.yml s3://healing-space-codedeploy-bucket/appspec.yml
          aws s3 cp scripts/start.sh s3://healing-space-codedeploy-bucket/start.sh

      - name: Deploy with CodeDeploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
            --application-name healing-space-codedeploy \   # AWS CodeDeploy에서 설정한 애플리케이션 이름
            --deployment-group-name healing-space-deploy-group \  # 배포 그룹 이름 (EC2 인스턴스들이 속한 그룹)
            --s3-location bucket=healing-space-codedeploy-bucket,key=myapp.jar,bundleType=zip
